generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  DIAGNOSTIC_READY
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Role {
  id String @id @default(uuid())

  name        String  @unique
  description String?

  users User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model User {
  id String @id @default(uuid())

  role_id String
  role    Role   @relation(fields: [role_id], references: [id])

  email    String @unique
  password String
  number   String @unique

  access_logs    AccessLog[]
  bookings       Booking[]
  BookingHistory BookingHistory[]
  vehicles       UserVehicle[]
  diagnoses      DiagnosticSession[]
  reviews        Review[]
  notifications  Notification[]
  payments       Payment[]
  PaymentHistory PaymentHistory[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([role_id])
  @@map("users")
}

model Vehicle {
  id String @id @default(uuid())

  vin   String @unique
  make  String
  model String
  year  Int

  owners    UserVehicle[]
  diagnoses DiagnosticSession[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("vehicles")
}

model UserVehicle {
  user_id    String
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vehicle_id String
  vehicle    Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@id([user_id, vehicle_id])
  @@index([vehicle_id])
  @@map("user_vehicles")
}

model DiagnosticSession {
  id String @id @default(uuid())

  user_id    String
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vehicle_id String
  vehicle    Vehicle @relation(fields: [vehicle_id], references: [id], onDelete: Cascade)

  token      String   @unique
  expires_at DateTime

  reports       DiagnosticReport[]
  notifications Notification[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([expires_at])
  @@map("diagnostic_sessions")
}

model DiagnosticReport {
  id String @id @default(uuid())

  session_id String            @unique
  session    DiagnosticSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  report_date DateTime @default(now())
  summary     String?

  sensor_data        SensorData[]
  report_error_codes ReportErrorCode[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([report_date])
  @@map("diagnostic_reports")
}

model SensorData {
  id String @id @default(uuid())

  report_id String
  report    DiagnosticReport @relation(fields: [report_id], references: [id], onDelete: Cascade)

  sensor_type String
  value       Float
  timestamp   DateTime

  created_at DateTime @default(now())

  @@index([report_id])
  @@map("sensor_data")
}

model ErrorCode {
  id String @id @default(uuid())

  code        String  @unique
  description String?
  severity    String?

  occurrences ReportErrorCode[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("error_codes")
}

model ReportErrorCode {
  report_id     String
  report        DiagnosticReport @relation(fields: [report_id], references: [id], onDelete: Cascade)
  error_code_id String
  error_code    ErrorCode        @relation(fields: [error_code_id], references: [id], onDelete: Cascade)

  @@id([report_id, error_code_id])
  @@index([error_code_id])
  @@map("report_error_codes")
}

model AccessLog {
  id String @id @default(uuid())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  action     String
  successful Boolean
  details    String?

  created_at DateTime @default(now())

  @@index([user_id])
  @@map("access_logs")
}

model ServiceCenter {
  id String @id @default(uuid())

  name    String @unique
  address String

  masters  Master[]
  bookings Booking[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("service_centers")
}

model Master {
  id String @id @default(uuid())

  service_center_id String
  service_center    ServiceCenter @relation(fields: [service_center_id], references: [id])

  name             String
  specialization   String
  completed_orders Int    @default(0)

  schedules        Schedule[]
  service_mappings ServiceOnMaster[]
  bookings         Booking[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([service_center_id])
  @@map("masters")
}

model Schedule {
  id String @id @default(uuid())

  master_id String
  master    Master @relation(fields: [master_id], references: [id], onDelete: Cascade)

  day_of_week Int
  start_time  DateTime
  end_time    DateTime

  created_at DateTime @default(now())

  @@index([master_id, day_of_week])
  @@map("schedules")
}

model ServiceGroup {
  id String @id @default(uuid())

  name        String
  description String?
  price       Float

  memberships ServiceOnServiceGroup[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("service_groups")
}

model Service {
  id String @id @default(uuid())

  name        String
  description String?
  price       Float

  bookings        Booking[]
  reviews         Review[]
  group_mappings  ServiceOnServiceGroup[]
  master_mappings ServiceOnMaster[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("services")
}

model ServiceOnServiceGroup {
  service_id       String
  service          Service      @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_group_id String
  service_group    ServiceGroup @relation(fields: [service_group_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@id([service_id, service_group_id])
  @@map("service_servicegroup")
}

/// Service-Master link
model ServiceOnMaster {
  service_id String
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)
  master_id  String
  master     Master  @relation(fields: [master_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@id([service_id, master_id])
  @@map("service_masters")
}

model Booking {
  id String @id @default(uuid())

  user_id           String
  user              User           @relation(fields: [user_id], references: [id])
  master_id         String
  master            Master         @relation(fields: [master_id], references: [id])
  service_id        String
  service           Service        @relation(fields: [service_id], references: [id])
  service_center_id String?
  service_center    ServiceCenter? @relation(fields: [service_center_id], references: [id])

  scheduled_at DateTime
  status       BookingStatus

  histories     BookingHistory[]
  notifications Notification[]
  payments      Payment[]
  reviews       Review[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
  @@index([master_id])
  @@index([service_id])
  @@map("bookings")
}

model BookingHistory {
  id String @id @default(uuid())

  booking_id    String
  booking       Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  changed_by_id String?
  changed_by    User?   @relation(fields: [changed_by_id], references: [id])

  from_status BookingStatus
  to_status   BookingStatus

  created_at DateTime @default(now())

  @@index([booking_id, created_at])
  @@map("booking_histories")
}

model Review {
  id String @id @default(uuid())

  user_id    String
  user       User    @relation(fields: [user_id], references: [id])
  service_id String
  service    Service @relation(fields: [service_id], references: [id])
  booking_id String
  booking    Booking @relation(fields: [booking_id], references: [id])

  rating  Int
  comment String
  status  ReviewStatus

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([service_id, status])
  @@index([user_id])
  @@map("reviews")
}

model Notification {
  id String @id @default(uuid())

  user_id    String
  user       User               @relation(fields: [user_id], references: [id])
  booking_id String?
  booking    Booking?           @relation(fields: [booking_id], references: [id])
  session_id String?
  session    DiagnosticSession? @relation(fields: [session_id], references: [id])

  type   NotificationType
  status NotificationStatus

  created_at DateTime @default(now())

  @@index([user_id])
  @@map("notifications")
}

model Payment {
  id String @id @default(uuid())

  user_id    String
  user       User    @relation(fields: [user_id], references: [id])
  booking_id String
  booking    Booking @relation(fields: [booking_id], references: [id])

  amount    Decimal
  currency  String           @default("AMD")
  status    PaymentStatus
  histories PaymentHistory[]

  created_at DateTime @default(now())

  @@index([user_id])
  @@index([booking_id])
  @@map("payments")
}

model PaymentHistory {
  id String @id @default(uuid())

  payment_id    String
  payment       Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  changed_by_id String?
  changed_by    User?   @relation(fields: [changed_by_id], references: [id])

  from_status PaymentStatus
  to_status   PaymentStatus

  created_at DateTime @default(now())

  @@index([payment_id, created_at])
  @@map("payment_histories")
}
